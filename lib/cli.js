"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _lodash = _interopRequireDefault(require("lodash"));

var _prepareConfig = _interopRequireDefault(require("./functions/prepare-config"));

var _loadApiDocuments = _interopRequireDefault(require("./functions/load-api-documents"));

var _convert = _interopRequireDefault(require("./functions/convert"));

var _generateServicesIfNeeded = _interopRequireDefault(require("./functions/generate-services-if-needed"));

var _loadCommonConfig = _interopRequireDefault(require("./functions/load-common-config"));

var _loadExistsServices = _interopRequireDefault(require("./functions/load-exists-services"));

var _mergeService = _interopRequireDefault(require("./functions/merge-service"));

var _writeServices = _interopRequireDefault(require("./functions/write-services"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander.default.version('0.2.0').description('Import functions from OpenAPI spec file to serverless.yml').option('-C, --config <path>', 'Specify config file path. (defailt "./sis.config.json")').option('-s, --service-name <string>', 'Specify service name. (default "service")').option('-i, --input [path]', 'Specify OpenAPI file path. (defailt "./openapi.ya?ml")', (item, acc) => !acc ? [item] : [...acc, item], undefined).option('-o, --out-dir <path>', 'Specify dist directory of services. (default "./")').option('-c, --common <path>', 'Specify common config of serverless file path. (default "./serverless.common.ya?ml")').option('-f, --force', 'If add this option, overwriten serverless.yml by generated definitinos.').parse(process.argv);

const exec = async com => {
  const cliOptions = {
    config: com.config,
    serviceName: com.serviceName,
    input: com.input,
    outDir: com.outDir,
    common: com.common,
    force: com.force
  };
  const config = await (0, _prepareConfig.default)(cliOptions);
  const apiDocuments = await (0, _loadApiDocuments.default)(config);
  const services = await (0, _convert.default)(apiDocuments, config);
  await (0, _generateServicesIfNeeded.default)(services, config);
  const common = await (0, _loadCommonConfig.default)(config);
  const existsArray = await (0, _loadExistsServices.default)(services, config);

  const mergedServices = _lodash.default.zip(services, existsArray).map(([service, exists]) => (0, _mergeService.default)(service, exists, common, config));

  await (0, _writeServices.default)(mergedServices, config); // tslint:disable-next-line

  console.log('Import success.');
}; // tslint:disable-next-line


exec(_commander.default).catch(error => console.error(error));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkudHMiXSwibmFtZXMiOlsiY29tbWFuZGVyIiwidmVyc2lvbiIsImRlc2NyaXB0aW9uIiwib3B0aW9uIiwiaXRlbSIsImFjYyIsInVuZGVmaW5lZCIsInBhcnNlIiwicHJvY2VzcyIsImFyZ3YiLCJleGVjIiwiY29tIiwiY2xpT3B0aW9ucyIsImNvbmZpZyIsInNlcnZpY2VOYW1lIiwiaW5wdXQiLCJvdXREaXIiLCJjb21tb24iLCJmb3JjZSIsImFwaURvY3VtZW50cyIsInNlcnZpY2VzIiwiZXhpc3RzQXJyYXkiLCJtZXJnZWRTZXJ2aWNlcyIsIl8iLCJ6aXAiLCJtYXAiLCJzZXJ2aWNlIiwiZXhpc3RzIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQUEsbUJBQ0dDLE9BREgsQ0FDVyxPQURYLEVBRUdDLFdBRkgsQ0FFZSwyREFGZixFQUdHQyxNQUhILENBSUkscUJBSkosRUFLSSx5REFMSixFQU9HQSxNQVBILENBUUksNkJBUkosRUFTSSwyQ0FUSixFQVdHQSxNQVhILENBWUksb0JBWkosRUFhSSx3REFiSixFQWNJLENBQUNDLElBQUQsRUFBT0MsR0FBUCxLQUFnQixDQUFDQSxHQUFELEdBQU8sQ0FBQ0QsSUFBRCxDQUFQLEdBQWdCLENBQUMsR0FBR0MsR0FBSixFQUFTRCxJQUFULENBZHBDLEVBZUlFLFNBZkosRUFpQkdILE1BakJILENBa0JJLHNCQWxCSixFQW1CSSxvREFuQkosRUFxQkdBLE1BckJILENBc0JJLHFCQXRCSixFQXVCSSxzRkF2QkosRUF5QkdBLE1BekJILENBMEJJLGFBMUJKLEVBMkJJLHlFQTNCSixFQTZCR0ksS0E3QkgsQ0E2QlNDLE9BQU8sQ0FBQ0MsSUE3QmpCOztBQStCQSxNQUFNQyxJQUFJLEdBQUcsTUFBT0MsR0FBUCxJQUFtQztBQUM5QyxRQUFNQyxVQUFzQixHQUFHO0FBQzdCQyxJQUFBQSxNQUFNLEVBQUVGLEdBQUcsQ0FBQ0UsTUFEaUI7QUFFN0JDLElBQUFBLFdBQVcsRUFBRUgsR0FBRyxDQUFDRyxXQUZZO0FBRzdCQyxJQUFBQSxLQUFLLEVBQUVKLEdBQUcsQ0FBQ0ksS0FIa0I7QUFJN0JDLElBQUFBLE1BQU0sRUFBRUwsR0FBRyxDQUFDSyxNQUppQjtBQUs3QkMsSUFBQUEsTUFBTSxFQUFFTixHQUFHLENBQUNNLE1BTGlCO0FBTTdCQyxJQUFBQSxLQUFLLEVBQUVQLEdBQUcsQ0FBQ087QUFOa0IsR0FBL0I7QUFTQSxRQUFNTCxNQUFNLEdBQUcsTUFBTSw0QkFBY0QsVUFBZCxDQUFyQjtBQUNBLFFBQU1PLFlBQVksR0FBRyxNQUFNLCtCQUFpQk4sTUFBakIsQ0FBM0I7QUFDQSxRQUFNTyxRQUFRLEdBQUcsTUFBTSxzQkFBUUQsWUFBUixFQUFzQk4sTUFBdEIsQ0FBdkI7QUFFQSxRQUFNLHVDQUF5Qk8sUUFBekIsRUFBbUNQLE1BQW5DLENBQU47QUFFQSxRQUFNSSxNQUFNLEdBQUcsTUFBTSwrQkFBaUJKLE1BQWpCLENBQXJCO0FBQ0EsUUFBTVEsV0FBVyxHQUFHLE1BQU0saUNBQW1CRCxRQUFuQixFQUE2QlAsTUFBN0IsQ0FBMUI7O0FBRUEsUUFBTVMsY0FBYyxHQUFJQyxnQkFBRUMsR0FBRixDQUFNSixRQUFOLEVBQWdCQyxXQUFoQixDQUFELENBRXBCSSxHQUZvQixDQUVoQixDQUFDLENBQUNDLE9BQUQsRUFBVUMsTUFBVixDQUFELEtBQXVCLDJCQUFhRCxPQUFiLEVBQXNCQyxNQUF0QixFQUE4QlYsTUFBOUIsRUFBc0NKLE1BQXRDLENBRlAsQ0FBdkI7O0FBSUEsUUFBTSw0QkFBY1MsY0FBZCxFQUE4QlQsTUFBOUIsQ0FBTixDQXZCOEMsQ0F5QjlDOztBQUNBZSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxpQkFBWjtBQUNELENBM0JELEMsQ0E2QkE7OztBQUNBbkIsSUFBSSxDQUFDVixrQkFBRCxDQUFKLENBQWdCOEIsS0FBaEIsQ0FBc0JDLEtBQUssSUFBSUgsT0FBTyxDQUFDRyxLQUFSLENBQWNBLEtBQWQsQ0FBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29tbWFuZGVyIGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBDTElPcHRpb25zLCBTbHNTZXJ2aWNlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHByZXBhcmVDb25maWcgZnJvbSAnLi9mdW5jdGlvbnMvcHJlcGFyZS1jb25maWcnO1xuaW1wb3J0IGxvYWRBUElEb2N1bWVudHMgZnJvbSAnLi9mdW5jdGlvbnMvbG9hZC1hcGktZG9jdW1lbnRzJztcbmltcG9ydCBjb252ZXJ0IGZyb20gJy4vZnVuY3Rpb25zL2NvbnZlcnQnO1xuaW1wb3J0IGdlbmVyYXRlU2VydmljZXNJZk5lZWRlZCBmcm9tICcuL2Z1bmN0aW9ucy9nZW5lcmF0ZS1zZXJ2aWNlcy1pZi1uZWVkZWQnO1xuaW1wb3J0IGxvYWRDb21tb25Db25maWcgZnJvbSAnLi9mdW5jdGlvbnMvbG9hZC1jb21tb24tY29uZmlnJztcbmltcG9ydCBsb2FkRXhpc3RzU2VydmljZXMgZnJvbSAnLi9mdW5jdGlvbnMvbG9hZC1leGlzdHMtc2VydmljZXMnO1xuaW1wb3J0IG1lcmdlU2VydmljZSBmcm9tICcuL2Z1bmN0aW9ucy9tZXJnZS1zZXJ2aWNlJztcbmltcG9ydCB3cml0ZVNlcnZpY2VzIGZyb20gJy4vZnVuY3Rpb25zL3dyaXRlLXNlcnZpY2VzJztcblxuY29tbWFuZGVyXG4gIC52ZXJzaW9uKCcwLjIuMCcpXG4gIC5kZXNjcmlwdGlvbignSW1wb3J0IGZ1bmN0aW9ucyBmcm9tIE9wZW5BUEkgc3BlYyBmaWxlIHRvIHNlcnZlcmxlc3MueW1sJylcbiAgLm9wdGlvbihcbiAgICAnLUMsIC0tY29uZmlnIDxwYXRoPicsXG4gICAgJ1NwZWNpZnkgY29uZmlnIGZpbGUgcGF0aC4gKGRlZmFpbHQgXCIuL3Npcy5jb25maWcuanNvblwiKSdcbiAgKVxuICAub3B0aW9uKFxuICAgICctcywgLS1zZXJ2aWNlLW5hbWUgPHN0cmluZz4nLFxuICAgICdTcGVjaWZ5IHNlcnZpY2UgbmFtZS4gKGRlZmF1bHQgXCJzZXJ2aWNlXCIpJ1xuICApXG4gIC5vcHRpb24oXG4gICAgJy1pLCAtLWlucHV0IFtwYXRoXScsXG4gICAgJ1NwZWNpZnkgT3BlbkFQSSBmaWxlIHBhdGguIChkZWZhaWx0IFwiLi9vcGVuYXBpLnlhP21sXCIpJyxcbiAgICAoaXRlbSwgYWNjKSA9PiAoIWFjYyA/IFtpdGVtXSA6IFsuLi5hY2MsIGl0ZW1dKSxcbiAgICB1bmRlZmluZWRcbiAgKVxuICAub3B0aW9uKFxuICAgICctbywgLS1vdXQtZGlyIDxwYXRoPicsXG4gICAgJ1NwZWNpZnkgZGlzdCBkaXJlY3Rvcnkgb2Ygc2VydmljZXMuIChkZWZhdWx0IFwiLi9cIiknXG4gIClcbiAgLm9wdGlvbihcbiAgICAnLWMsIC0tY29tbW9uIDxwYXRoPicsXG4gICAgJ1NwZWNpZnkgY29tbW9uIGNvbmZpZyBvZiBzZXJ2ZXJsZXNzIGZpbGUgcGF0aC4gKGRlZmF1bHQgXCIuL3NlcnZlcmxlc3MuY29tbW9uLnlhP21sXCIpJ1xuICApXG4gIC5vcHRpb24oXG4gICAgJy1mLCAtLWZvcmNlJyxcbiAgICAnSWYgYWRkIHRoaXMgb3B0aW9uLCBvdmVyd3JpdGVuIHNlcnZlcmxlc3MueW1sIGJ5IGdlbmVyYXRlZCBkZWZpbml0aW5vcy4nXG4gIClcbiAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbmNvbnN0IGV4ZWMgPSBhc3luYyAoY29tOiBhbnkpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgY2xpT3B0aW9uczogQ0xJT3B0aW9ucyA9IHtcbiAgICBjb25maWc6IGNvbS5jb25maWcsXG4gICAgc2VydmljZU5hbWU6IGNvbS5zZXJ2aWNlTmFtZSxcbiAgICBpbnB1dDogY29tLmlucHV0LFxuICAgIG91dERpcjogY29tLm91dERpcixcbiAgICBjb21tb246IGNvbS5jb21tb24sXG4gICAgZm9yY2U6IGNvbS5mb3JjZSxcbiAgfTtcblxuICBjb25zdCBjb25maWcgPSBhd2FpdCBwcmVwYXJlQ29uZmlnKGNsaU9wdGlvbnMpO1xuICBjb25zdCBhcGlEb2N1bWVudHMgPSBhd2FpdCBsb2FkQVBJRG9jdW1lbnRzKGNvbmZpZyk7XG4gIGNvbnN0IHNlcnZpY2VzID0gYXdhaXQgY29udmVydChhcGlEb2N1bWVudHMsIGNvbmZpZyk7XG5cbiAgYXdhaXQgZ2VuZXJhdGVTZXJ2aWNlc0lmTmVlZGVkKHNlcnZpY2VzLCBjb25maWcpO1xuXG4gIGNvbnN0IGNvbW1vbiA9IGF3YWl0IGxvYWRDb21tb25Db25maWcoY29uZmlnKTtcbiAgY29uc3QgZXhpc3RzQXJyYXkgPSBhd2FpdCBsb2FkRXhpc3RzU2VydmljZXMoc2VydmljZXMsIGNvbmZpZyk7XG5cbiAgY29uc3QgbWVyZ2VkU2VydmljZXMgPSAoXy56aXAoc2VydmljZXMsIGV4aXN0c0FycmF5KSBhcyBBcnJheTxcbiAgICBbU2xzU2VydmljZSwgU2xzU2VydmljZV1cbiAgPikubWFwKChbc2VydmljZSwgZXhpc3RzXSkgPT4gbWVyZ2VTZXJ2aWNlKHNlcnZpY2UsIGV4aXN0cywgY29tbW9uLCBjb25maWcpKTtcblxuICBhd2FpdCB3cml0ZVNlcnZpY2VzKG1lcmdlZFNlcnZpY2VzLCBjb25maWcpO1xuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICBjb25zb2xlLmxvZygnSW1wb3J0IHN1Y2Nlc3MuJyk7XG59O1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbmV4ZWMoY29tbWFuZGVyKS5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4iXX0=