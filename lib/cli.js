"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _lodash = _interopRequireDefault(require("lodash"));

var _prepareConfig = _interopRequireDefault(require("./functions/prepare-config"));

var _loadApiDocuments = _interopRequireDefault(require("./functions/load-api-documents"));

var _convert = _interopRequireDefault(require("./functions/convert"));

var _generateServicesIfNeeded = _interopRequireDefault(require("./functions/generate-services-if-needed"));

var _loadCommonConfig = _interopRequireDefault(require("./functions/load-common-config"));

var _loadExistsServices = _interopRequireDefault(require("./functions/load-exists-services"));

var _mergeService = _interopRequireDefault(require("./functions/merge-service"));

var _writeServices = _interopRequireDefault(require("./functions/write-services"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander.default.version('0.2.0').description('Import functions from swagger spec filet to serverless.yml').option('-C, --config <path>', 'Specify config file path. (defailt "./sis.config.json")').option('-s, --service-name <strinng>', 'Specify service name. (default "service")').option('-i, --input [path]', 'Specify swagger file path. (defailt "./swagger.ya?ml")', (item, acc) => !acc ? [item] : [...acc, item], undefined).option('-o, --out-dir <path>', 'Specify dist directory of services. (default "./")').option('-c, --common <path>', 'Specify common config of serverless file path. (default "./serverless.common.ya?ml")').option('-f, --force', 'If add this option, overwriten serverless.yml by generated definitinos.').parse(process.argv);

const exec = async com => {
  const cliOptions = {
    config: com.config,
    serviceName: com.serviceName,
    input: com.input,
    outDir: com.outDir,
    common: com.common,
    force: com.force
  };
  const config = await (0, _prepareConfig.default)(cliOptions);
  const apiDocuments = await (0, _loadApiDocuments.default)(config);
  const services = await (0, _convert.default)(apiDocuments, config);
  await (0, _generateServicesIfNeeded.default)(services, config);
  const common = await (0, _loadCommonConfig.default)(config);
  const existsArray = await (0, _loadExistsServices.default)(services, config);

  const mergedServices = _lodash.default.zip(services, existsArray).map(([service, exists]) => (0, _mergeService.default)(service, exists, common, config));

  await (0, _writeServices.default)(mergedServices, config); // tslint:disable-next-line

  console.log('Import success.');
}; // tslint:disable-next-line


exec(_commander.default).catch(error => console.error(error));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGkudHMiXSwibmFtZXMiOlsiY29tbWFuZGVyIiwidmVyc2lvbiIsImRlc2NyaXB0aW9uIiwib3B0aW9uIiwiaXRlbSIsImFjYyIsInVuZGVmaW5lZCIsInBhcnNlIiwicHJvY2VzcyIsImFyZ3YiLCJleGVjIiwiY29tIiwiY2xpT3B0aW9ucyIsImNvbmZpZyIsInNlcnZpY2VOYW1lIiwiaW5wdXQiLCJvdXREaXIiLCJjb21tb24iLCJmb3JjZSIsImFwaURvY3VtZW50cyIsInNlcnZpY2VzIiwiZXhpc3RzQXJyYXkiLCJtZXJnZWRTZXJ2aWNlcyIsIl8iLCJ6aXAiLCJtYXAiLCJzZXJ2aWNlIiwiZXhpc3RzIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQUEsbUJBQ0dDLE9BREgsQ0FDVyxPQURYLEVBRUdDLFdBRkgsQ0FFZSw0REFGZixFQUdHQyxNQUhILENBSUkscUJBSkosRUFLSSx5REFMSixFQU9HQSxNQVBILENBUUksOEJBUkosRUFTSSwyQ0FUSixFQVdHQSxNQVhILENBWUksb0JBWkosRUFhSSx3REFiSixFQWNJLENBQUNDLElBQUQsRUFBT0MsR0FBUCxLQUFnQixDQUFDQSxHQUFELEdBQU8sQ0FBQ0QsSUFBRCxDQUFQLEdBQWdCLENBQUMsR0FBR0MsR0FBSixFQUFTRCxJQUFULENBZHBDLEVBZUlFLFNBZkosRUFpQkdILE1BakJILENBa0JJLHNCQWxCSixFQW1CSSxvREFuQkosRUFxQkdBLE1BckJILENBc0JJLHFCQXRCSixFQXVCSSxzRkF2QkosRUF5QkdBLE1BekJILENBMEJJLGFBMUJKLEVBMkJJLHlFQTNCSixFQTZCR0ksS0E3QkgsQ0E2QlNDLE9BQU8sQ0FBQ0MsSUE3QmpCOztBQStCQSxNQUFNQyxJQUFJLEdBQUcsTUFBT0MsR0FBUCxJQUFtQztBQUM5QyxRQUFNQyxVQUFzQixHQUFHO0FBQzdCQyxJQUFBQSxNQUFNLEVBQUVGLEdBQUcsQ0FBQ0UsTUFEaUI7QUFFN0JDLElBQUFBLFdBQVcsRUFBRUgsR0FBRyxDQUFDRyxXQUZZO0FBRzdCQyxJQUFBQSxLQUFLLEVBQUVKLEdBQUcsQ0FBQ0ksS0FIa0I7QUFJN0JDLElBQUFBLE1BQU0sRUFBRUwsR0FBRyxDQUFDSyxNQUppQjtBQUs3QkMsSUFBQUEsTUFBTSxFQUFFTixHQUFHLENBQUNNLE1BTGlCO0FBTTdCQyxJQUFBQSxLQUFLLEVBQUVQLEdBQUcsQ0FBQ087QUFOa0IsR0FBL0I7QUFTQSxRQUFNTCxNQUFNLEdBQUcsTUFBTSw0QkFBY0QsVUFBZCxDQUFyQjtBQUNBLFFBQU1PLFlBQVksR0FBRyxNQUFNLCtCQUFpQk4sTUFBakIsQ0FBM0I7QUFDQSxRQUFNTyxRQUFRLEdBQUcsTUFBTSxzQkFBUUQsWUFBUixFQUFzQk4sTUFBdEIsQ0FBdkI7QUFFQSxRQUFNLHVDQUF5Qk8sUUFBekIsRUFBbUNQLE1BQW5DLENBQU47QUFFQSxRQUFNSSxNQUFNLEdBQUcsTUFBTSwrQkFBaUJKLE1BQWpCLENBQXJCO0FBQ0EsUUFBTVEsV0FBVyxHQUFHLE1BQU0saUNBQW1CRCxRQUFuQixFQUE2QlAsTUFBN0IsQ0FBMUI7O0FBRUEsUUFBTVMsY0FBYyxHQUFJQyxnQkFBRUMsR0FBRixDQUFNSixRQUFOLEVBQWdCQyxXQUFoQixDQUFELENBRXBCSSxHQUZvQixDQUVoQixDQUFDLENBQUNDLE9BQUQsRUFBVUMsTUFBVixDQUFELEtBQXVCLDJCQUFhRCxPQUFiLEVBQXNCQyxNQUF0QixFQUE4QlYsTUFBOUIsRUFBc0NKLE1BQXRDLENBRlAsQ0FBdkI7O0FBSUEsUUFBTSw0QkFBY1MsY0FBZCxFQUE4QlQsTUFBOUIsQ0FBTixDQXZCOEMsQ0F5QjlDOztBQUNBZSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxpQkFBWjtBQUNELENBM0JELEMsQ0E2QkE7OztBQUNBbkIsSUFBSSxDQUFDVixrQkFBRCxDQUFKLENBQWdCOEIsS0FBaEIsQ0FBc0JDLEtBQUssSUFBSUgsT0FBTyxDQUFDRyxLQUFSLENBQWNBLEtBQWQsQ0FBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29tbWFuZGVyIGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBDTElPcHRpb25zLCBTbHNTZXJ2aWNlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHByZXBhcmVDb25maWcgZnJvbSAnLi9mdW5jdGlvbnMvcHJlcGFyZS1jb25maWcnO1xuaW1wb3J0IGxvYWRBUElEb2N1bWVudHMgZnJvbSAnLi9mdW5jdGlvbnMvbG9hZC1hcGktZG9jdW1lbnRzJztcbmltcG9ydCBjb252ZXJ0IGZyb20gJy4vZnVuY3Rpb25zL2NvbnZlcnQnO1xuaW1wb3J0IGdlbmVyYXRlU2VydmljZXNJZk5lZWRlZCBmcm9tICcuL2Z1bmN0aW9ucy9nZW5lcmF0ZS1zZXJ2aWNlcy1pZi1uZWVkZWQnO1xuaW1wb3J0IGxvYWRDb21tb25Db25maWcgZnJvbSAnLi9mdW5jdGlvbnMvbG9hZC1jb21tb24tY29uZmlnJztcbmltcG9ydCBsb2FkRXhpc3RzU2VydmljZXMgZnJvbSAnLi9mdW5jdGlvbnMvbG9hZC1leGlzdHMtc2VydmljZXMnO1xuaW1wb3J0IG1lcmdlU2VydmljZSBmcm9tICcuL2Z1bmN0aW9ucy9tZXJnZS1zZXJ2aWNlJztcbmltcG9ydCB3cml0ZVNlcnZpY2VzIGZyb20gJy4vZnVuY3Rpb25zL3dyaXRlLXNlcnZpY2VzJztcblxuY29tbWFuZGVyXG4gIC52ZXJzaW9uKCcwLjIuMCcpXG4gIC5kZXNjcmlwdGlvbignSW1wb3J0IGZ1bmN0aW9ucyBmcm9tIHN3YWdnZXIgc3BlYyBmaWxldCB0byBzZXJ2ZXJsZXNzLnltbCcpXG4gIC5vcHRpb24oXG4gICAgJy1DLCAtLWNvbmZpZyA8cGF0aD4nLFxuICAgICdTcGVjaWZ5IGNvbmZpZyBmaWxlIHBhdGguIChkZWZhaWx0IFwiLi9zaXMuY29uZmlnLmpzb25cIiknXG4gIClcbiAgLm9wdGlvbihcbiAgICAnLXMsIC0tc2VydmljZS1uYW1lIDxzdHJpbm5nPicsXG4gICAgJ1NwZWNpZnkgc2VydmljZSBuYW1lLiAoZGVmYXVsdCBcInNlcnZpY2VcIiknXG4gIClcbiAgLm9wdGlvbihcbiAgICAnLWksIC0taW5wdXQgW3BhdGhdJyxcbiAgICAnU3BlY2lmeSBzd2FnZ2VyIGZpbGUgcGF0aC4gKGRlZmFpbHQgXCIuL3N3YWdnZXIueWE/bWxcIiknLFxuICAgIChpdGVtLCBhY2MpID0+ICghYWNjID8gW2l0ZW1dIDogWy4uLmFjYywgaXRlbV0pLFxuICAgIHVuZGVmaW5lZFxuICApXG4gIC5vcHRpb24oXG4gICAgJy1vLCAtLW91dC1kaXIgPHBhdGg+JyxcbiAgICAnU3BlY2lmeSBkaXN0IGRpcmVjdG9yeSBvZiBzZXJ2aWNlcy4gKGRlZmF1bHQgXCIuL1wiKSdcbiAgKVxuICAub3B0aW9uKFxuICAgICctYywgLS1jb21tb24gPHBhdGg+JyxcbiAgICAnU3BlY2lmeSBjb21tb24gY29uZmlnIG9mIHNlcnZlcmxlc3MgZmlsZSBwYXRoLiAoZGVmYXVsdCBcIi4vc2VydmVybGVzcy5jb21tb24ueWE/bWxcIiknXG4gIClcbiAgLm9wdGlvbihcbiAgICAnLWYsIC0tZm9yY2UnLFxuICAgICdJZiBhZGQgdGhpcyBvcHRpb24sIG92ZXJ3cml0ZW4gc2VydmVybGVzcy55bWwgYnkgZ2VuZXJhdGVkIGRlZmluaXRpbm9zLidcbiAgKVxuICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuY29uc3QgZXhlYyA9IGFzeW5jIChjb206IGFueSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBjbGlPcHRpb25zOiBDTElPcHRpb25zID0ge1xuICAgIGNvbmZpZzogY29tLmNvbmZpZyxcbiAgICBzZXJ2aWNlTmFtZTogY29tLnNlcnZpY2VOYW1lLFxuICAgIGlucHV0OiBjb20uaW5wdXQsXG4gICAgb3V0RGlyOiBjb20ub3V0RGlyLFxuICAgIGNvbW1vbjogY29tLmNvbW1vbixcbiAgICBmb3JjZTogY29tLmZvcmNlLFxuICB9O1xuXG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IHByZXBhcmVDb25maWcoY2xpT3B0aW9ucyk7XG4gIGNvbnN0IGFwaURvY3VtZW50cyA9IGF3YWl0IGxvYWRBUElEb2N1bWVudHMoY29uZmlnKTtcbiAgY29uc3Qgc2VydmljZXMgPSBhd2FpdCBjb252ZXJ0KGFwaURvY3VtZW50cywgY29uZmlnKTtcblxuICBhd2FpdCBnZW5lcmF0ZVNlcnZpY2VzSWZOZWVkZWQoc2VydmljZXMsIGNvbmZpZyk7XG5cbiAgY29uc3QgY29tbW9uID0gYXdhaXQgbG9hZENvbW1vbkNvbmZpZyhjb25maWcpO1xuICBjb25zdCBleGlzdHNBcnJheSA9IGF3YWl0IGxvYWRFeGlzdHNTZXJ2aWNlcyhzZXJ2aWNlcywgY29uZmlnKTtcblxuICBjb25zdCBtZXJnZWRTZXJ2aWNlcyA9IChfLnppcChzZXJ2aWNlcywgZXhpc3RzQXJyYXkpIGFzIEFycmF5PFxuICAgIFtTbHNTZXJ2aWNlLCBTbHNTZXJ2aWNlXVxuICA+KS5tYXAoKFtzZXJ2aWNlLCBleGlzdHNdKSA9PiBtZXJnZVNlcnZpY2Uoc2VydmljZSwgZXhpc3RzLCBjb21tb24sIGNvbmZpZykpO1xuXG4gIGF3YWl0IHdyaXRlU2VydmljZXMobWVyZ2VkU2VydmljZXMsIGNvbmZpZyk7XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnNvbGUubG9nKCdJbXBvcnQgc3VjY2Vzcy4nKTtcbn07XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuZXhlYyhjb21tYW5kZXIpLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiJdfQ==