"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadFileAsJSONIfExists = exports.existsItem = exports.getPathIfExistsWithRegExp = exports.resolveAppRootPath = void 0;

var _path = _interopRequireDefault(require("path"));

var _gracefulFs = _interopRequireDefault(require("graceful-fs"));

var _util = require("util");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _appRootPath = _interopRequireDefault(require("app-root-path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const resolveAppRootPath = (relativePath, appRootPath = _appRootPath.default.path) => {
  return _path.default.resolve(appRootPath, relativePath);
};

exports.resolveAppRootPath = resolveAppRootPath;

const getPathIfExistsWithRegExp = async (regexp, dirPath = _appRootPath.default.path) => {
  const items = await (0, _util.promisify)(_gracefulFs.default.readdir)(dirPath);
  const matched = items.find(item => regexp.test(item));
  return typeof matched !== 'undefined' ? _path.default.resolve(dirPath, matched) : undefined;
};

exports.getPathIfExistsWithRegExp = getPathIfExistsWithRegExp;

const existsItem = itemPath => {
  return new Promise(resolve => {
    _gracefulFs.default.access(itemPath, error => {
      if (error) {
        resolve(false);
      } else {
        resolve(true);
      }
    });
  });
};

exports.existsItem = existsItem;

const loadFileAsJSONIfExists = async filePath => {
  const dataString = await (0, _util.promisify)(_gracefulFs.default.readFile)(filePath, 'utf8'); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  let parsed;

  if (/.json$/.test(filePath)) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    parsed = JSON.parse(dataString);
  } else if (/.ya?ml$/.test(filePath)) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    parsed = _jsYaml.default.safeLoad(dataString);
  }

  return parsed;
};

exports.loadFileAsJSONIfExists = loadFileAsJSONIfExists;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6WyJyZXNvbHZlQXBwUm9vdFBhdGgiLCJyZWxhdGl2ZVBhdGgiLCJhcHBSb290UGF0aCIsImFwcFJvb3QiLCJwYXRoIiwicmVzb2x2ZSIsImdldFBhdGhJZkV4aXN0c1dpdGhSZWdFeHAiLCJyZWdleHAiLCJkaXJQYXRoIiwiaXRlbXMiLCJmcyIsInJlYWRkaXIiLCJtYXRjaGVkIiwiZmluZCIsIml0ZW0iLCJ0ZXN0IiwidW5kZWZpbmVkIiwiZXhpc3RzSXRlbSIsIml0ZW1QYXRoIiwiUHJvbWlzZSIsImFjY2VzcyIsImVycm9yIiwibG9hZEZpbGVBc0pTT05JZkV4aXN0cyIsImZpbGVQYXRoIiwiZGF0YVN0cmluZyIsInJlYWRGaWxlIiwicGFyc2VkIiwiSlNPTiIsInBhcnNlIiwianN5YW1sIiwic2FmZUxvYWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVPLE1BQU1BLGtCQUFrQixHQUFHLENBQ2hDQyxZQURnQyxFQUVoQ0MsV0FBbUIsR0FBR0MscUJBQVFDLElBRkUsS0FHckI7QUFDWCxTQUFPQSxjQUFLQyxPQUFMLENBQWFILFdBQWIsRUFBMEJELFlBQTFCLENBQVA7QUFDRCxDQUxNOzs7O0FBT0EsTUFBTUsseUJBQXlCLEdBQUcsT0FDdkNDLE1BRHVDLEVBRXZDQyxPQUFlLEdBQUdMLHFCQUFRQyxJQUZhLEtBR1A7QUFDaEMsUUFBTUssS0FBSyxHQUFHLE1BQU0scUJBQVVDLG9CQUFHQyxPQUFiLEVBQXNCSCxPQUF0QixDQUFwQjtBQUNBLFFBQU1JLE9BQU8sR0FBR0gsS0FBSyxDQUFDSSxJQUFOLENBQVdDLElBQUksSUFBSVAsTUFBTSxDQUFDUSxJQUFQLENBQVlELElBQVosQ0FBbkIsQ0FBaEI7QUFFQSxTQUFPLE9BQU9GLE9BQVAsS0FBbUIsV0FBbkIsR0FDSFIsY0FBS0MsT0FBTCxDQUFhRyxPQUFiLEVBQXNCSSxPQUF0QixDQURHLEdBRUhJLFNBRko7QUFHRCxDQVZNOzs7O0FBWUEsTUFBTUMsVUFBVSxHQUFJQyxRQUFELElBQXdDO0FBQ2hFLFNBQU8sSUFBSUMsT0FBSixDQUFZZCxPQUFPLElBQUk7QUFDNUJLLHdCQUFHVSxNQUFILENBQVVGLFFBQVYsRUFBb0JHLEtBQUssSUFBSTtBQUMzQixVQUFJQSxLQUFKLEVBQVc7QUFDVGhCLFFBQUFBLE9BQU8sQ0FBQyxLQUFELENBQVA7QUFDRCxPQUZELE1BRU87QUFDTEEsUUFBQUEsT0FBTyxDQUFDLElBQUQsQ0FBUDtBQUNEO0FBQ0YsS0FORDtBQU9ELEdBUk0sQ0FBUDtBQVNELENBVk07Ozs7QUFZQSxNQUFNaUIsc0JBQXNCLEdBQUcsTUFDcENDLFFBRG9DLElBR25CO0FBQ2pCLFFBQU1DLFVBQVUsR0FBRyxNQUFNLHFCQUFVZCxvQkFBR2UsUUFBYixFQUF1QkYsUUFBdkIsRUFBaUMsTUFBakMsQ0FBekIsQ0FEaUIsQ0FFakI7O0FBQ0EsTUFBSUcsTUFBSjs7QUFDQSxNQUFJLFNBQVNYLElBQVQsQ0FBY1EsUUFBZCxDQUFKLEVBQTZCO0FBQzNCO0FBQ0FHLElBQUFBLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdKLFVBQVgsQ0FBVDtBQUNELEdBSEQsTUFHTyxJQUFJLFVBQVVULElBQVYsQ0FBZVEsUUFBZixDQUFKLEVBQThCO0FBQ25DO0FBQ0FHLElBQUFBLE1BQU0sR0FBR0csZ0JBQU9DLFFBQVAsQ0FBZ0JOLFVBQWhCLENBQVQ7QUFDRDs7QUFFRCxTQUFPRSxNQUFQO0FBQ0QsQ0FoQk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdncmFjZWZ1bC1mcyc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcblxuaW1wb3J0IGpzeWFtbCBmcm9tICdqcy15YW1sJztcbmltcG9ydCBhcHBSb290IGZyb20gJ2FwcC1yb290LXBhdGgnO1xuXG5leHBvcnQgY29uc3QgcmVzb2x2ZUFwcFJvb3RQYXRoID0gKFxuICByZWxhdGl2ZVBhdGg6IHN0cmluZyxcbiAgYXBwUm9vdFBhdGg6IHN0cmluZyA9IGFwcFJvb3QucGF0aFxuKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHBhdGgucmVzb2x2ZShhcHBSb290UGF0aCwgcmVsYXRpdmVQYXRoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQYXRoSWZFeGlzdHNXaXRoUmVnRXhwID0gYXN5bmMgKFxuICByZWdleHA6IFJlZ0V4cCxcbiAgZGlyUGF0aDogc3RyaW5nID0gYXBwUm9vdC5wYXRoXG4pOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4gPT4ge1xuICBjb25zdCBpdGVtcyA9IGF3YWl0IHByb21pc2lmeShmcy5yZWFkZGlyKShkaXJQYXRoKTtcbiAgY29uc3QgbWF0Y2hlZCA9IGl0ZW1zLmZpbmQoaXRlbSA9PiByZWdleHAudGVzdChpdGVtKSk7XG5cbiAgcmV0dXJuIHR5cGVvZiBtYXRjaGVkICE9PSAndW5kZWZpbmVkJ1xuICAgID8gcGF0aC5yZXNvbHZlKGRpclBhdGgsIG1hdGNoZWQpXG4gICAgOiB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgZXhpc3RzSXRlbSA9IChpdGVtUGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBmcy5hY2Nlc3MoaXRlbVBhdGgsIGVycm9yID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvYWRGaWxlQXNKU09OSWZFeGlzdHMgPSBhc3luYyAoXG4gIGZpbGVQYXRoOiBzdHJpbmdcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbik6IFByb21pc2U8YW55PiA9PiB7XG4gIGNvbnN0IGRhdGFTdHJpbmcgPSBhd2FpdCBwcm9taXNpZnkoZnMucmVhZEZpbGUpKGZpbGVQYXRoLCAndXRmOCcpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBsZXQgcGFyc2VkOiBhbnk7XG4gIGlmICgvLmpzb24kLy50ZXN0KGZpbGVQYXRoKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgcGFyc2VkID0gSlNPTi5wYXJzZShkYXRhU3RyaW5nKTtcbiAgfSBlbHNlIGlmICgvLnlhP21sJC8udGVzdChmaWxlUGF0aCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHBhcnNlZCA9IGpzeWFtbC5zYWZlTG9hZChkYXRhU3RyaW5nKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIl19