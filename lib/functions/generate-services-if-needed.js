"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateService = exports.existsService = exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _child_process = _interopRequireDefault(require("child_process"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = async (services, config, appRootPath = undefined) => {
  await Promise.all(services.map(async service => {
    const exists = await existsService(service, config, appRootPath);

    if (!exists) {
      await generateService(service, config, appRootPath);
    }
  }));
};

exports.default = _default;

const existsService = async (service, config, appRootPath = undefined) => {
  const dirPath = config.outDir ? (0, _utils.resolveAppRootPath)(_path.default.resolve(config.outDir, service.service), appRootPath) : (0, _utils.resolveAppRootPath)(service.service, appRootPath);
  return (0, _utils.existsItem)(dirPath);
};

exports.existsService = existsService;

const generateService = async (service, config, appRootPath = undefined) => {
  const targetPath = config.outDir ? `${config.outDir}/${service.service}` : service.service;
  const localSlsPath = (0, _utils.resolveAppRootPath)('./node_modules/.bin/sls', appRootPath);
  const existsLocalSls = await (0, _utils.existsItem)(localSlsPath);
  const command = existsLocalSls ? `${localSlsPath} create -t aws-nodejs -p ${targetPath}` : `sls create -t aws-nodejs -p ${targetPath}`;
  return new Promise((resolve, reject) => {
    _child_process.default.exec(command, (error, stdout, stderr) => {
      if (error) {
        // eslint-disable-next-line no-console
        console.error(stderr);
        reject(error);
      } else {
        // eslint-disable-next-line no-console
        console.log(stdout);
        resolve();
      }
    });
  });
};

exports.generateService = generateService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mdW5jdGlvbnMvZ2VuZXJhdGUtc2VydmljZXMtaWYtbmVlZGVkLnRzIl0sIm5hbWVzIjpbInNlcnZpY2VzIiwiY29uZmlnIiwiYXBwUm9vdFBhdGgiLCJ1bmRlZmluZWQiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwic2VydmljZSIsImV4aXN0cyIsImV4aXN0c1NlcnZpY2UiLCJnZW5lcmF0ZVNlcnZpY2UiLCJkaXJQYXRoIiwib3V0RGlyIiwicGF0aCIsInJlc29sdmUiLCJ0YXJnZXRQYXRoIiwibG9jYWxTbHNQYXRoIiwiZXhpc3RzTG9jYWxTbHMiLCJjb21tYW5kIiwicmVqZWN0IiwiY2hpbGRQcm9jZXNzIiwiZXhlYyIsImVycm9yIiwic3Rkb3V0Iiwic3RkZXJyIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUdBOzs7O2VBRWUsT0FDYkEsUUFEYSxFQUViQyxNQUZhLEVBR2JDLFdBQStCLEdBQUdDLFNBSHJCLEtBSUs7QUFDbEIsUUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQ0pMLFFBQVEsQ0FBQ00sR0FBVCxDQUFhLE1BQU1DLE9BQU4sSUFBaUI7QUFDNUIsVUFBTUMsTUFBTSxHQUFHLE1BQU1DLGFBQWEsQ0FBQ0YsT0FBRCxFQUFVTixNQUFWLEVBQWtCQyxXQUFsQixDQUFsQzs7QUFDQSxRQUFJLENBQUNNLE1BQUwsRUFBYTtBQUNYLFlBQU1FLGVBQWUsQ0FBQ0gsT0FBRCxFQUFVTixNQUFWLEVBQWtCQyxXQUFsQixDQUFyQjtBQUNEO0FBQ0YsR0FMRCxDQURJLENBQU47QUFRRCxDOzs7O0FBRU0sTUFBTU8sYUFBYSxHQUFHLE9BQzNCRixPQUQyQixFQUUzQk4sTUFGMkIsRUFHM0JDLFdBQStCLEdBQUdDLFNBSFAsS0FJTjtBQUNyQixRQUFNUSxPQUFPLEdBQUdWLE1BQU0sQ0FBQ1csTUFBUCxHQUNaLCtCQUNFQyxjQUFLQyxPQUFMLENBQWFiLE1BQU0sQ0FBQ1csTUFBcEIsRUFBNEJMLE9BQU8sQ0FBQ0EsT0FBcEMsQ0FERixFQUVFTCxXQUZGLENBRFksR0FLWiwrQkFBbUJLLE9BQU8sQ0FBQ0EsT0FBM0IsRUFBb0NMLFdBQXBDLENBTEo7QUFPQSxTQUFPLHVCQUFXUyxPQUFYLENBQVA7QUFDRCxDQWJNOzs7O0FBZUEsTUFBTUQsZUFBZSxHQUFHLE9BQzdCSCxPQUQ2QixFQUU3Qk4sTUFGNkIsRUFHN0JDLFdBQStCLEdBQUdDLFNBSEwsS0FJWDtBQUNsQixRQUFNWSxVQUFVLEdBQUdkLE1BQU0sQ0FBQ1csTUFBUCxHQUNkLEdBQUVYLE1BQU0sQ0FBQ1csTUFBTyxJQUFHTCxPQUFPLENBQUNBLE9BQVEsRUFEckIsR0FFZkEsT0FBTyxDQUFDQSxPQUZaO0FBSUEsUUFBTVMsWUFBWSxHQUFHLCtCQUNuQix5QkFEbUIsRUFFbkJkLFdBRm1CLENBQXJCO0FBS0EsUUFBTWUsY0FBYyxHQUFHLE1BQU0sdUJBQVdELFlBQVgsQ0FBN0I7QUFDQSxRQUFNRSxPQUFPLEdBQUdELGNBQWMsR0FDekIsR0FBRUQsWUFBYSw0QkFBMkJELFVBQVcsRUFENUIsR0FFekIsK0JBQThCQSxVQUFXLEVBRjlDO0FBSUEsU0FBTyxJQUFJWCxPQUFKLENBQVksQ0FBQ1UsT0FBRCxFQUFVSyxNQUFWLEtBQXFCO0FBQ3RDQywyQkFBYUMsSUFBYixDQUFrQkgsT0FBbEIsRUFBMkIsQ0FBQ0ksS0FBRCxFQUFRQyxNQUFSLEVBQWdCQyxNQUFoQixLQUEyQjtBQUNwRCxVQUFJRixLQUFKLEVBQVc7QUFDVDtBQUNBRyxRQUFBQSxPQUFPLENBQUNILEtBQVIsQ0FBY0UsTUFBZDtBQUNBTCxRQUFBQSxNQUFNLENBQUNHLEtBQUQsQ0FBTjtBQUNELE9BSkQsTUFJTztBQUNMO0FBQ0FHLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxNQUFaO0FBQ0FULFFBQUFBLE9BQU87QUFDUjtBQUNGLEtBVkQ7QUFXRCxHQVpNLENBQVA7QUFhRCxDQWhDTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGNoaWxkUHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuaW1wb3J0IHsgSW50ZXJuYWxDb25maWcsIFNsc1NlcnZpY2UgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IHJlc29sdmVBcHBSb290UGF0aCwgZXhpc3RzSXRlbSB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKFxuICBzZXJ2aWNlczogU2xzU2VydmljZVtdLFxuICBjb25maWc6IEludGVybmFsQ29uZmlnLFxuICBhcHBSb290UGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgc2VydmljZXMubWFwKGFzeW5jIHNlcnZpY2UgPT4ge1xuICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgZXhpc3RzU2VydmljZShzZXJ2aWNlLCBjb25maWcsIGFwcFJvb3RQYXRoKTtcbiAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgIGF3YWl0IGdlbmVyYXRlU2VydmljZShzZXJ2aWNlLCBjb25maWcsIGFwcFJvb3RQYXRoKTtcbiAgICAgIH1cbiAgICB9KVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4aXN0c1NlcnZpY2UgPSBhc3luYyAoXG4gIHNlcnZpY2U6IFNsc1NlcnZpY2UsXG4gIGNvbmZpZzogSW50ZXJuYWxDb25maWcsXG4gIGFwcFJvb3RQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbik6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICBjb25zdCBkaXJQYXRoID0gY29uZmlnLm91dERpclxuICAgID8gcmVzb2x2ZUFwcFJvb3RQYXRoKFxuICAgICAgICBwYXRoLnJlc29sdmUoY29uZmlnLm91dERpciwgc2VydmljZS5zZXJ2aWNlKSxcbiAgICAgICAgYXBwUm9vdFBhdGhcbiAgICAgIClcbiAgICA6IHJlc29sdmVBcHBSb290UGF0aChzZXJ2aWNlLnNlcnZpY2UsIGFwcFJvb3RQYXRoKTtcblxuICByZXR1cm4gZXhpc3RzSXRlbShkaXJQYXRoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVNlcnZpY2UgPSBhc3luYyAoXG4gIHNlcnZpY2U6IFNsc1NlcnZpY2UsXG4gIGNvbmZpZzogSW50ZXJuYWxDb25maWcsXG4gIGFwcFJvb3RQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCB0YXJnZXRQYXRoID0gY29uZmlnLm91dERpclxuICAgID8gYCR7Y29uZmlnLm91dERpcn0vJHtzZXJ2aWNlLnNlcnZpY2V9YFxuICAgIDogc2VydmljZS5zZXJ2aWNlO1xuXG4gIGNvbnN0IGxvY2FsU2xzUGF0aCA9IHJlc29sdmVBcHBSb290UGF0aChcbiAgICAnLi9ub2RlX21vZHVsZXMvLmJpbi9zbHMnLFxuICAgIGFwcFJvb3RQYXRoXG4gICk7XG5cbiAgY29uc3QgZXhpc3RzTG9jYWxTbHMgPSBhd2FpdCBleGlzdHNJdGVtKGxvY2FsU2xzUGF0aCk7XG4gIGNvbnN0IGNvbW1hbmQgPSBleGlzdHNMb2NhbFNsc1xuICAgID8gYCR7bG9jYWxTbHNQYXRofSBjcmVhdGUgLXQgYXdzLW5vZGVqcyAtcCAke3RhcmdldFBhdGh9YFxuICAgIDogYHNscyBjcmVhdGUgLXQgYXdzLW5vZGVqcyAtcCAke3RhcmdldFBhdGh9YDtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNoaWxkUHJvY2Vzcy5leGVjKGNvbW1hbmQsIChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmVycm9yKHN0ZGVycik7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmxvZyhzdGRvdXQpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcbiJdfQ==