"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFunctionName = exports.createServiceName = exports.getOperationConfig = exports.getDocumentConfig = exports.getOperations = exports.getPaths = exports.createIsolatedSlsServie = exports.createOperationObjects = exports.collectOperationObjects = exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _changeCase = _interopRequireDefault(require("change-case"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (apiDocuments, config) => {
  const operationObjects = collectOperationObjects(apiDocuments, config);
  const isolatedSLSServices = operationObjects.map(obj => createIsolatedSlsServie(obj));
  const serviceNames = new Set();
  isolatedSLSServices.forEach(s => {
    serviceNames.add(s.service);
  });
  return Array.from(serviceNames).map(sn => {
    const services = isolatedSLSServices.filter(s => s.service === sn);
    return _lodash.default.merge({}, ...services);
  });
};

exports.default = _default;

const collectOperationObjects = (apiDocuments, config) => {
  const docConfigs = apiDocuments.map(doc => getDocumentConfig(doc));
  const operationObjectsArray = apiDocuments.map((doc, i) => {
    const contextConfig = _lodash.default.merge({}, config, docConfigs[i]);

    const paths = getPaths(doc);
    const ops = paths.getPathItems().map(pathItem => {
      return createOperationObjects(pathItem, contextConfig);
    });
    return _lodash.default.flatten(ops);
  });
  return _lodash.default.flatten(operationObjectsArray);
};

exports.collectOperationObjects = collectOperationObjects;

const createOperationObjects = (pathItem, contextConfig) => {
  const path = pathItem.getPath();
  const operations = getOperations(pathItem);
  const operationObjects = [];
  operations.forEach(operation => {
    const operationConfig = getOperationConfig(operation);

    if (!contextConfig.all && typeof operationConfig === 'undefined') {
      return;
    }

    operationObjects.push({
      path,
      method: operation.getMethod().toLowerCase(),
      operationId: operation.operationId,
      config: _lodash.default.merge({}, contextConfig, operationConfig)
    });
  });

  if (operationObjects.some(oo => oo.config.options.optionsMethod) && operationObjects.every(oo => oo.method !== 'options')) {
    operationObjects.push({
      path,
      method: 'options',
      config: contextConfig
    });
  }

  return operationObjects;
};

exports.createOperationObjects = createOperationObjects;

const createIsolatedSlsServie = operationObject => {
  const service = createServiceName(operationObject);
  const functionName = createFunctionName(operationObject);
  const handler = `handler.${functionName}`;
  let path;

  if (operationObject.config.basePath === false) {
    path = operationObject.path;
  } else {
    const splited = operationObject.path.slice(1).split('/');
    path = splited.length === 1 ? '/' : `/${splited.slice(1).join('/')}`;
  }

  const httpEvent = {
    http: {
      path,
      method: operationObject.method,
      integration: 'lambda-proxy'
    }
  };
  const options = operationObject.config.options;

  if (options.cors) {
    httpEvent.http.cors = options.cors;
  }

  if (options.authorizer) {
    httpEvent.http.authorizer = options.authorizer;
  }

  const func = {
    handler,
    events: [httpEvent]
  };
  const functions = {
    [functionName]: func
  };
  return {
    service,
    functions
  };
};

exports.createIsolatedSlsServie = createIsolatedSlsServie;

const getPaths = apiDocument => {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return apiDocument.paths;
};

exports.getPaths = getPaths;

const getOperations = pathItem => {
  return [pathItem.get, pathItem.put, pathItem.post, pathItem.delete, pathItem.options, pathItem.head, pathItem.patch].filter(op => op !== null);
};

exports.getOperations = getOperations;

const getDocumentConfig = apiDocument => {
  const extension = apiDocument.getExtension('x-sis-config');
  return extension ? extension.value : undefined;
};

exports.getDocumentConfig = getDocumentConfig;

const getOperationConfig = operation => {
  const extension = operation.getExtension('x-sis-config');
  return extension ? extension.value : undefined;
};

exports.getOperationConfig = getOperationConfig;

const createServiceName = operationObject => {
  const {
    path,
    config
  } = operationObject;
  const {
    basePath
  } = config;

  if (basePath === false) {
    return config.serviceName;
  } else {
    let prefix;

    if (basePath === true) {
      prefix = undefined;
    } else {
      prefix = basePath.servicePrefix;
    }

    const pathArray = path.split('/').filter(p => p.length > 0);

    if (pathArray.length === 0) {
      throw new Error('Can not use the root path when the base path option is enabled.');
    }

    const subName = _changeCase.default.paramCase(pathArray[0]);

    return prefix ? `${prefix}-${subName}` : subName;
  }
};

exports.createServiceName = createServiceName;

const createFunctionName = operationObject => {
  const {
    path,
    method,
    operationId,
    config
  } = operationObject;
  const {
    basePath,
    options
  } = config;

  if (options.operationId && typeof operationId === 'string') {
    return operationId;
  }

  const resources = path.split('/').filter(w => w.length > 0).filter((w, i) => basePath ? i !== 0 : true).reduce((acc, current, index, arr) => {
    if (/^\{.*\}$/.test(current)) {
      return acc;
    } else {
      if (/^\{.*\}$/.test(arr[index - 1])) {
        return [current];
      } else {
        return [...acc, current];
      }
    }
  }, []).filter(w => !/^\{.*\}$/.test(w)).map(w => _changeCase.default.pascalCase(w));
  const conditions = path.split('/').filter(w => w.length > 0).filter(w => /^\{.*\}$/.test(w)).map((w, i) => {
    const n = _changeCase.default.dotCase(w.slice(1, -1)).split('.').map(s => _changeCase.default.pascalCase(s.slice(0, 3))).join('');

    return i === 0 ? `With${n}` : n;
  });
  return [method, ...resources, ...conditions].join('');
};

exports.createFunctionName = createFunctionName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,